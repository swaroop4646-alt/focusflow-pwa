// FocusFlow app.js - compact
const APP_KEY='focusflow_v3'; const SNAPSHOT_KEY='focusflow_snapshots_v1'; const CURRENT_VERSION=3;
let state={version:CURRENT_VERSION,createdAt:new Date().toISOString(),settings:{theme:'dark',reminderEnabled:false,reminderTime:'20:00'},habits:[],moodLog:[]};
const $=s=>document.querySelector(s), $$=s=>Array.from(document.querySelectorAll(s)); const todayStr=()=>new Date().toISOString().slice(0,10);
const uid=()=> (crypto.randomUUID?crypto.randomUUID(): 'id_'+Date.now()+Math.random().toString(16).slice(2));
const safeParse=(s,f)=>{try{return JSON.parse(s);}catch(e){return f;}};
function loadState(){const raw=localStorage.getItem(APP_KEY); if(!raw)return saveState(); const p=safeParse(raw,null); if(!p) return saveState(); state=Object.assign({},state,p); if(!state.version||state.version<CURRENT_VERSION)migrateState(state.version||1); return state;}
function migrateState(oldV){ state.habits = Array.isArray(state.habits)? state.habits.map(h=>({id:h.id||uid(), name:h.name||'Untitled', createdAt:h.createdAt||todayStr(), datesCompleted:Array.isArray(h.datesCompleted)?h.datesCompleted:(h.dates||[])})) : []; state.moodLog = Array.isArray(state.moodLog)? state.moodLog.map(m=>({date:m.date,mood:Number(m.mood)||3})) : []; state.settings = Object.assign({theme:'dark',reminderEnabled:false,reminderTime:'20:00'}, state.settings||{}); state.version=CURRENT_VERSION; saveState(); }
function saveState(){ try{ localStorage.setItem(APP_KEY, JSON.stringify(state)); }catch(e){console.error('Save error',e);} }
function saveSnapshot(){ const s=safeParse(localStorage.getItem(SNAPSHOT_KEY),[]); s.push({createdAt:new Date().toISOString(),snapshot:state}); while(s.length>10) s.shift(); localStorage.setItem(SNAPSHOT_KEY, JSON.stringify(s)); alert('Snapshot saved locally.'); }
function downloadLastSnapshot(){ const s=safeParse(localStorage.getItem(SNAPSHOT_KEY),[]); if(!s.length) return alert('No snapshots saved.'); const last=s[s.length-1]; const blob=new Blob([JSON.stringify(last,null,2)],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='focusflow-snapshot-'+last.createdAt.replace(/[:.]/g,'-')+'.json'; document.body.appendChild(a); a.click(); a.remove(); }
function exportExcel(){ try{ const habitsRows=state.habits.map(h=>({id:h.id,name:h.name,createdAt:h.createdAt,datesCompleted:(h.datesCompleted||[]).join(',')})); const moodRows=state.moodLog.map(m=>({date:m.date,mood:m.mood})); const wb=XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(habitsRows), 'Habits'); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(moodRows), 'Mood'); XLSX.writeFile(wb,'focusflow-backup.xlsx'); }catch(e){ alert('Export failed: '+(e.message||e)); } }
function exportJSON(){ const blob=new Blob([JSON.stringify(state,null,2)],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='focusflow-backup.json'; document.body.appendChild(a); a.click(); a.remove(); }
function importExcelFile(file){ const reader=new FileReader(); reader.onload=(e)=>{ try{ const data=new Uint8Array(e.target.result); const wb=XLSX.read(data,{type:'array'}); const toJSON=s=>XLSX.utils.sheet_to_json(wb.Sheets[s]||{}); const habitsRows=toJSON('Habits'); const moodRows=toJSON('Mood'); if(!Array.isArray(habitsRows)) throw new Error('No Habits sheet found.'); if(!confirm('Import will ADD/MERGE data if possible. Press OK to merge, Cancel to replace entire data.')) return; const byId=Object.fromEntries(state.habits.map(h=>[h.id,h])); const byName=Object.fromEntries(state.habits.map(h=>[h.name.toLowerCase(),h])); for(const r of habitsRows){ const name=String(r.name||'Untitled'); const dates=String(r.datesCompleted||'').split(',').map(s=>s.trim()).filter(Boolean); let target = (r.id && byId[r.id])? byId[r.id] : byName[name.toLowerCase()]; if(target){ const set=new Set([...(target.datesCompleted||[]), ...dates]); target.datesCompleted=Array.from(set).sort().reverse(); } else state.habits.push({ id:r.id||uid(), name, createdAt:r.createdAt||todayStr(), datesCompleted:dates }); } const moodMap=Object.fromEntries(state.moodLog.map(m=>[m.date,m])); for(const m of moodRows) if(m.date) moodMap[m.date]={date:m.date,mood:Number(m.mood)||3}; state.moodLog=Object.values(moodMap).sort((a,b)=>a.date.localeCompare(b.date)); saveState(); render(); alert('Import merged successfully.'); }catch(err){ console.error(err); alert('Import failed: '+(err.message||err)); } }; reader.readAsArrayBuffer(file); }
function computeStreak(dates){ const set=new Set(dates||[]); let streak=0; for(let i=0;;i++){ const d=new Date(); d.setDate(d.getDate()-i); const s=d.toISOString().slice(0,10); if(set.has(s)) streak++; else break; } return streak; }
function renderHabits(){ const list=$('#habitList'); list.innerHTML=''; for(const h of state.habits){ const li=document.createElement('li'); li.className='item'; li.draggable=true; li.dataset.id=h.id; const left=document.createElement('div'); left.style.display='grid'; left.style.gap='.2rem'; const name=document.createElement('div'); name.className='name'; name.textContent=h.name; const streak=document.createElement('div'); streak.className='streak'; streak.textContent='🔥 '+computeStreak(h.datesCompleted)+' day streak'; left.append(name,streak); const btnDone=document.createElement('button'); btnDone.className='btn done'; const doneToday=(h.datesCompleted||[]).includes(todayStr()); if(doneToday) btnDone.classList.add('doneToday'); btnDone.textContent = doneToday? 'Done ✓':'Mark done'; btnDone.addEventListener('click',()=>{ toggleToday(h.id); }); const btnEdit=document.createElement('button'); btnEdit.className='icon'; btnEdit.textContent='✏️'; btnEdit.title='Rename'; btnEdit.addEventListener('click',()=>{ const n=prompt('Rename habit', h.name); if(n){ h.name=n.trim(); saveState(); render(); } }); const btnDelete=document.createElement('button'); btnDelete.className='icon'; btnDelete.textContent='🗑️'; btnDelete.style.color='var(--danger)'; btnDelete.addEventListener('click',()=>{ if(!confirm('Delete "'+h.name+'"?')) return; state.habits=state.habits.filter(x=>x.id!==h.id); saveState(); render(); }); li.append(left, btnDone, btnEdit, btnDelete); list.appendChild(li); li.addEventListener('dragstart',()=>li.classList.add('dragging')); li.addEventListener('dragend',()=>li.classList.remove('dragging')); li.addEventListener('dragover',(e)=>{ e.preventDefault(); const dragging=list.querySelector('.dragging'); if(!dragging) return; const items=Array.from(list.querySelectorAll('.item:not(.dragging)')); const after=items.find(item=> e.clientY <= item.getBoundingClientRect().top + item.getBoundingClientRect().height/2); if(!after) list.appendChild(dragging); else list.insertBefore(dragging, after); }); } list.addEventListener('drop',()=>{ const ids=Array.from(document.querySelectorAll('#habitList .item')).map(li=>li.dataset.id); state.habits.sort((a,b)=>ids.indexOf(a.id)-ids.indexOf(b.id)); saveState(); render(); }, { once:true }); }
function toggleToday(id){ const h=state.habits.find(x=>x.id===id); if(!h) return; const idx=(h.datesCompleted||[]).indexOf(todayStr()); if(idx>=0) h.datesCompleted.splice(idx,1); else h.datesCompleted.push(todayStr()); saveState(); render(); }
function addHabit(name){ name=name.trim(); if(!name) return; state.habits.push({ id: uid(), name, createdAt: new Date().toISOString().slice(0,10), datesCompleted: [] }); saveState(); render(); }
function setMood(mood){ const date=todayStr(); const ex=state.moodLog.find(m=>m.date===date); if(ex) ex.mood=mood; else state.moodLog.push({date, mood}); saveState(); renderMood(); }
let chart=null; function renderChart(){ const ctx=document.getElementById('historyChart'); const labels=[]; const data=[]; for(let i=29;i>=0;i--){ const d=new Date(); d.setDate(d.getDate()-i); const s=d.toISOString().slice(0,10); labels.push(s.slice(5)); let c=0; for(const h of state.habits) if((h.datesCompleted||[]).includes(s)) c++; data.push(c); } if(chart) chart.destroy(); chart = new Chart(ctx,{ type:'bar', data:{ labels, datasets:[{ label:'Habits done', data, backgroundColor:'#22c55e'}]}, options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } }, scales:{ x:{ ticks:{ maxRotation:0, autoSkip:true, maxTicksLimit:10 } }, y:{ beginAtZero:true, precision:0 } } } }); }
function renderMood(){ const log=state.moodLog.find(m=>m.date===todayStr()); $$('#moodButtons button').forEach(b=>b.classList.remove('active')); if(log){ const b=document.querySelector('#moodButtons button[data-mood="'+log.mood+'"]'); if(b) b.classList.add('active'); $('#moodStatus').textContent='Logged: '+[':(',':(',':|',':)',':D'][log.mood-1]+' ('+log.mood+'/5)'; } else { $('#moodStatus').textContent='No mood logged yet today.'; } }
function renderSettings(){ $('#reminderEnabled').checked = !!state.settings.reminderEnabled; $('#reminderTime').value = state.settings.reminderTime || '20:00'; }
function render(){ document.documentElement.classList.toggle('light', state.settings.theme==='light'); $('#todayLabel').textContent = new Date().toLocaleDateString(undefined, { weekday:'short', month:'short', day:'numeric' }); renderHabits(); renderMood(); renderChart(); renderSettings(); }
let reminderTimer=null; function startReminderLoop(){ if(reminderTimer) clearInterval(reminderTimer); reminderTimer=setInterval(checkReminder,30000); }
function checkReminder(){ if(!state.settings.reminderEnabled) return; const [hh,mm] = (state.settings.reminderTime||'20:00').split(':').map(Number); const now=new Date(); if(now.getHours()===hh && now.getMinutes()===mm){ const key='reminded_'+todayStr(); if(sessionStorage.getItem(key)) return; sessionStorage.setItem(key,'1'); if(Notification && Notification.permission==='granted') navigator.serviceWorker.getRegistration().then(reg=>reg?.showNotification('FocusFlow reminder',{ body:'Mark your habits & mood for today', icon:'./icons/icon-192.png'})); else alert('Reminder: Mark your habits & mood for today.'); } }
async function askNotificationPermission(){ try{ const r = await Notification.requestPermission(); alert('Permission: '+r); }catch(e){ alert('Notifications not supported'); } }
document.addEventListener('DOMContentLoaded',()=>{ loadState(); render(); startReminderLoop(); $('#btnAdd').addEventListener('click', ()=>{ addHabit($('#habitName').value); $('#habitName').value=''; }); $('#habitName').addEventListener('keydown', e=>{ if(e.key==='Enter'){ addHabit($('#habitName').value); $('#habitName').value=''; } }); $('#btnExportXLSX').addEventListener('click', exportExcel); $('#btnExportJSON').addEventListener('click', exportJSON); $('#fileImportXLSX').addEventListener('change', e=>{ const f=e.target.files[0]; if(f) importExcelFile(f); e.target.value=''; }); $('#btnAutoBackup').addEventListener('click', saveSnapshot); $('#btnDownloadSnapshot').addEventListener('click', downloadLastSnapshot); $$('#moodButtons button').forEach(btn=>btn.addEventListener('click', ()=>setMood(Number(btn.dataset.mood)))); $('#btnTheme').addEventListener('click', ()=>{ state.settings.theme = state.settings.theme==='dark' ? 'light' : 'dark'; saveState(); render(); }); $('#btnAskNotification').addEventListener('click', askNotificationPermission); $('#reminderEnabled').addEventListener('change', e=>{ state.settings.reminderEnabled = e.target.checked; saveState(); }); $('#reminderTime').addEventListener('change', e=>{ state.settings.reminderTime = e.target.value || '20:00'; saveState(); }); $('#btnClearData').addEventListener('click', ()=>{ if(!confirm('This will permanently clear all local data. Have you exported a backup?')) return; localStorage.removeItem(APP_KEY); localStorage.removeItem(SNAPSHOT_KEY); state = { version:CURRENT_VERSION, createdAt:new Date().toISOString(), settings:{theme:'dark',reminderEnabled:false,reminderTime:'20:00'}, habits:[], moodLog:[] }; saveState(); render(); alert('Local data cleared.'); }); let deferredPrompt=null; window.addEventListener('beforeinstallprompt', e=>{ e.preventDefault(); deferredPrompt = e; $('#installPrompt').classList.remove('hidden'); }); $('#btnInstall').addEventListener('click', async ()=>{ if(!deferredPrompt) return; deferredPrompt.prompt(); await deferredPrompt.userChoice; deferredPrompt=null; $('#installPrompt').classList.add('hidden'); }); });